-- Create bus_companies table
CREATE TABLE IF NOT EXISTS public.bus_companies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    company_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'pending'
);
-- Drop existing policies if they exist
do $$
begin
  -- Drop bus_companies policies if they exist
  if exists (
    select 1
    from pg_policies
    where schemaname = 'public'
    and tablename = 'bus_companies'
    and policyname = 'Allow public registration'
  ) then
    drop policy if exists "Allow public registration" on public.bus_companies;
  end if;

  if exists (
    select 1
    from pg_policies
    where schemaname = 'public'
    and tablename = 'bus_companies'
    and policyname = 'Allow admins full access'
  ) then
    drop policy if exists "Allow admins full access" on public.bus_companies;
  end if;

  -- Drop notifications policies if they exist
  if exists (
    select 1
    from pg_policies
    where schemaname = 'public'
    and tablename = 'notifications'
    and policyname = 'Allow admins to view notifications'
  ) then
    drop policy if exists "Allow admins to view notifications" on public.notifications;
  end if;
end$$;
-- Set up RLS policies
ALTER TABLE public.bus_companies ENABLE ROW LEVEL SECURITY;
-- Allow anyone to insert (for registration)
CREATE POLICY "Allow public registration" ON public.bus_companies
    FOR INSERT
    TO public
    WITH CHECK (true);
-- Allow admins to view and update all records
CREATE POLICY "Allow admins full access" ON public.bus_companies
    FOR ALL
    TO authenticated
    USING (auth.jwt() ->> 'role' = 'admin')
    WITH CHECK (auth.jwt() ->> 'role' = 'admin');
-- Create notifications table for admin alerts
CREATE TABLE IF NOT EXISTS public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    type TEXT NOT NULL,
    message TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id),
    data JSONB,
    read_at TIMESTAMP WITH TIME ZONE,
    content JSONB
);
-- Set up RLS for notifications
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
-- Allow admins to view their notifications
CREATE POLICY "Allow admins to view notifications" ON public.notifications
    FOR SELECT
    TO authenticated
    USING (auth.jwt() ->> 'role' = 'admin');
-- Drop existing trigger and function if they exist
DROP TRIGGER IF EXISTS on_bus_company_registration ON public.bus_companies;
DROP FUNCTION IF EXISTS public.notify_admins_of_registration();
-- Create function to notify admins
CREATE OR REPLACE FUNCTION public.notify_admins_of_registration()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.notifications (type, message, user_id, content)
    SELECT 
        'NEW_BUS_COMPANY_REGISTRATION',
        'New bus company registration: ' || NEW.company_name,
        id,
        jsonb_build_object(
            'message', 'New bus company registration: ' || NEW.company_name,
            'company_id', NEW.id,
            'company_name', NEW.company_name
        )
    FROM auth.users
    WHERE auth.jwt() ->> 'role' = 'admin';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create trigger for new registrations
CREATE TRIGGER on_bus_company_registration
    AFTER INSERT ON public.bus_companies
    FOR EACH ROW
    EXECUTE FUNCTION public.notify_admins_of_registration();
