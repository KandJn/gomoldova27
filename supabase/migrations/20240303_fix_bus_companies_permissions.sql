-- First, disable RLS to reset everything
ALTER TABLE public.bus_companies DISABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Allow public registration" ON public.bus_companies;
DROP POLICY IF EXISTS "Allow public view own registrations" ON public.bus_companies;
DROP POLICY IF EXISTS "Allow admins full access" ON public.bus_companies;

-- Make sure the bus_companies table exists with all required columns
CREATE TABLE IF NOT EXISTS public.bus_companies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    company_name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'pending',
    approved_at TIMESTAMP WITH TIME ZONE,
    rejected_at TIMESTAMP WITH TIME ZONE
);

-- Enable RLS
ALTER TABLE public.bus_companies ENABLE ROW LEVEL SECURITY;

-- Create a simple policy that allows anyone to insert
CREATE POLICY "Allow public insert"
ON public.bus_companies
FOR INSERT
TO public
WITH CHECK (true);

-- Create a policy that allows anyone to view their own registrations
CREATE POLICY "Allow view own registrations"
ON public.bus_companies
FOR SELECT
TO public
USING (true);

-- Create a policy that allows admins full access
CREATE POLICY "Allow admin full access"
ON public.bus_companies
FOR ALL
TO authenticated
USING (auth.jwt() ->> 'role' = 'admin');

-- Create a function to check if a user is an admin
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN (
    auth.jwt() ->> 'role' = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a function to handle bus company approval
CREATE OR REPLACE FUNCTION public.approve_bus_company(company_id BIGINT)
RETURNS json AS $$
BEGIN
  IF NOT public.is_admin() THEN
    RETURN json_build_object(
      'success', false,
      'message', 'Only administrators can approve bus companies'
    );
  END IF;

  UPDATE public.bus_companies
  SET 
    status = 'approved',
    approved_at = NOW()
  WHERE id = company_id;

  RETURN json_build_object(
    'success', true,
    'message', 'Bus company approved successfully'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create a function to handle bus company rejection
CREATE OR REPLACE FUNCTION public.reject_bus_company(company_id BIGINT)
RETURNS json AS $$
BEGIN
  IF NOT public.is_admin() THEN
    RETURN json_build_object(
      'success', false,
      'message', 'Only administrators can reject bus companies'
    );
  END IF;

  UPDATE public.bus_companies
  SET 
    status = 'rejected',
    rejected_at = NOW()
  WHERE id = company_id;

  RETURN json_build_object(
    'success', true,
    'message', 'Bus company rejected successfully'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant necessary permissions
GRANT ALL ON public.bus_companies TO anon;
GRANT ALL ON public.bus_companies TO authenticated;
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT EXECUTE ON FUNCTION public.is_admin TO anon, authenticated;
GRANT EXECUTE ON FUNCTION public.approve_bus_company TO authenticated;
GRANT EXECUTE ON FUNCTION public.reject_bus_company TO authenticated;

-- Create notifications table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    type TEXT NOT NULL,
    message TEXT NOT NULL,
    recipient_role TEXT NOT NULL,
    data JSONB,
    read BOOLEAN DEFAULT false
);

-- Enable RLS on notifications
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Create policy to allow admins to view notifications
CREATE POLICY "Allow admins to view notifications"
ON public.notifications
FOR SELECT
TO authenticated
USING (recipient_role = 'admin' AND auth.jwt() ->> 'role' = 'admin');

-- Create function to notify admins of new registrations
CREATE OR REPLACE FUNCTION public.notify_admins_of_registration()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.notifications (type, message, recipient_role, data)
    VALUES (
        'bus_company_registration',
        'New bus company registration: ' || NEW.company_name,
        'admin',
        jsonb_build_object(
            'company_name', NEW.company_name,
            'email', NEW.email,
            'registration_id', NEW.id
        )
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for new registrations
DROP TRIGGER IF EXISTS on_bus_company_registration ON public.bus_companies;
CREATE TRIGGER on_bus_company_registration
    AFTER INSERT ON public.bus_companies
    FOR EACH ROW
    EXECUTE FUNCTION public.notify_admins_of_registration();

-- Make user_id nullable
ALTER TABLE public.bus_companies ALTER COLUMN user_id DROP NOT NULL; 