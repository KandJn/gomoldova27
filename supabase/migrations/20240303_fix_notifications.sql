-- Drop the existing notifications table if it exists
DROP TABLE IF EXISTS public.notifications;

-- Create the notifications table with all required columns
CREATE TABLE public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    type TEXT NOT NULL,
    message TEXT NOT NULL,
    recipient_role TEXT NOT NULL,
    data JSONB,
    read BOOLEAN DEFAULT false
);

-- Grant permissions for the notifications table
GRANT ALL ON public.notifications TO anon;
GRANT ALL ON public.notifications TO authenticated;
GRANT ALL ON public.notifications TO service_role;

-- Recreate the notification trigger function
CREATE OR REPLACE FUNCTION public.notify_admins_of_registration()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.notifications (type, message, recipient_role, data)
    VALUES (
        'bus_company_registration',
        'New bus company registration: ' || NEW.company_name,
        'admin',
        jsonb_build_object(
            'company_name', NEW.company_name,
            'email', NEW.email,
            'registration_id', NEW.id
        )
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop and recreate the trigger
DROP TRIGGER IF EXISTS on_bus_company_registration ON public.bus_companies;
CREATE TRIGGER on_bus_company_registration
    AFTER INSERT ON public.bus_companies
    FOR EACH ROW
    EXECUTE FUNCTION public.notify_admins_of_registration(); 