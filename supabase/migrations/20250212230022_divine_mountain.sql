\n\n-- Drop existing policies if they exist\nDO $$ \nBEGIN\n  -- Profiles policies\n  DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
\n  DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
\n  \n  -- Trips policies\n  DROP POLICY IF EXISTS "Trips are viewable by everyone" ON trips;
\n  DROP POLICY IF EXISTS "Users with complete profiles can create trips" ON trips;
\n  \n  -- Bookings policies\n  DROP POLICY IF EXISTS "Users can view their own bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Users can create bookings" ON bookings;
\n  \n  -- Messages policies\n  DROP POLICY IF EXISTS "Users can send and receive messages" ON messages;
\n  DROP POLICY IF EXISTS "Users can send messages" ON messages;
\n  \n  -- Notifications policies\n  DROP POLICY IF EXISTS "Users can view own notifications" ON notifications;
\nEND $$;
\n\n-- Recreate policies\nDO $$ \nBEGIN\n  -- Profiles policies\n  CREATE POLICY "Public profiles are viewable by everyone"\n    ON profiles FOR SELECT\n    TO public\n    USING (true);
\n\n  CREATE POLICY "Users can update own profile"\n    ON profiles FOR UPDATE\n    TO authenticated\n    USING (auth.uid() = id)\n    WITH CHECK (auth.uid() = id);
\n\n  -- Trips policies\n  CREATE POLICY "Trips are viewable by everyone"\n    ON trips FOR SELECT\n    TO public\n    USING (true);
\n\n  CREATE POLICY "Users with complete profiles can create trips"\n    ON trips FOR INSERT\n    TO authenticated\n    WITH CHECK (\n      auth.uid() = driver_id AND\n      EXISTS (\n        SELECT 1 FROM profiles\n        WHERE id = auth.uid()\n        AND profile_completed = true\n        AND (\n          (is_driver = true AND license_verified = true) OR\n          is_driver = false\n        )\n      )\n    );
\n\n  -- Bookings policies\n  CREATE POLICY "Users can view their own bookings"\n    ON bookings FOR SELECT\n    TO authenticated\n    USING (\n      auth.uid() = user_id OR\n      EXISTS (\n        SELECT 1 \n        FROM trips \n        WHERE id = trip_id \n        AND driver_id = auth.uid()\n      )\n    );
\n\n  CREATE POLICY "Users can create bookings"\n    ON bookings FOR INSERT\n    TO authenticated\n    WITH CHECK (\n      auth.uid() = user_id AND\n      EXISTS (\n        SELECT 1\n        FROM trips t\n        LEFT JOIN bookings b ON b.trip_id = t.id\n        WHERE t.id = trip_id\n        AND t.seats > (\n          SELECT COUNT(*)\n          FROM bookings b2\n          WHERE b2.trip_id = t.id\n          AND b2.status = 'accepted'\n        )\n      )\n    );
\n\n  -- Messages policies\n  CREATE POLICY "Users can send and receive messages"\n    ON messages FOR SELECT\n    TO authenticated\n    USING (auth.uid() IN (sender_id, receiver_id));
\n\n  CREATE POLICY "Users can send messages"\n    ON messages FOR INSERT\n    TO authenticated\n    WITH CHECK (auth.uid() = sender_id);
\n\n  -- Notifications policies\n  CREATE POLICY "Users can view own notifications"\n    ON notifications FOR SELECT\n    TO authenticated\n    USING (auth.uid() = user_id);
\nEND $$;
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW trip_seats;
;
