\n\n-- Drop existing policies if they exist\nDO $$ \nBEGIN\n  -- Drop message policies if they exist\n  DROP POLICY IF EXISTS "Users can view their messages" ON messages;
\n  DROP POLICY IF EXISTS "Users can send messages" ON messages;
\n  DROP POLICY IF EXISTS "Users can mark messages as read" ON messages;
\n  \n  -- Drop notification policies if they exist\n  DROP POLICY IF EXISTS "Users can view own notifications" ON notifications;
\n  DROP POLICY IF EXISTS "Users can mark notifications as read" ON notifications;
\nEND $$;
\n\n-- Create messages table if it doesn't exist\nDO $$ \nBEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'messages') THEN\n    CREATE TABLE messages (\n      id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n      sender_id uuid REFERENCES profiles NOT NULL,\n      receiver_id uuid REFERENCES profiles NOT NULL,\n      content text NOT NULL,\n      created_at timestamptz DEFAULT now(),\n      read_at timestamptz\n    );
\n\n    -- Enable RLS\n    ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
\n\n    -- Create indexes\n    CREATE INDEX idx_messages_participants ON messages(sender_id, receiver_id);
\n    CREATE INDEX idx_messages_created_at ON messages(created_at);
\n  END IF;
\nEND $$;
\n\n-- Create notifications table if it doesn't exist\nDO $$ \nBEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_tables WHERE tablename = 'notifications') THEN\n    CREATE TABLE notifications (\n      id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n      user_id uuid REFERENCES profiles NOT NULL,\n      type text NOT NULL,\n      content jsonb NOT NULL,\n      created_at timestamptz DEFAULT now(),\n      read_at timestamptz\n    );
\n\n    -- Enable RLS\n    ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
\n\n    -- Create indexes\n    CREATE INDEX idx_notifications_user ON notifications(user_id);
\n    CREATE INDEX idx_notifications_created_at ON notifications(created_at);
\n  END IF;
\nEND $$;
\n\n-- Create new policies\nDO $$ \nBEGIN\n  -- Messages policies\n  CREATE POLICY "Users can view their messages"\n    ON messages FOR SELECT\n    TO authenticated\n    USING (auth.uid() IN (sender_id, receiver_id));
\n\n  CREATE POLICY "Users can send messages"\n    ON messages FOR INSERT\n    TO authenticated\n    WITH CHECK (auth.uid() = sender_id);
\n\n  CREATE POLICY "Users can mark messages as read"\n    ON messages FOR UPDATE\n    TO authenticated\n    USING (auth.uid() = receiver_id)\n    WITH CHECK (\n      auth.uid() = receiver_id AND\n      read_at IS NOT NULL AND\n      EXISTS (\n        SELECT 1\n        FROM messages m\n        WHERE m.id = messages.id\n        AND m.read_at IS NULL\n      )\n    );
\n\n  -- Notifications policies\n  CREATE POLICY "Users can view own notifications"\n    ON notifications FOR SELECT\n    TO authenticated\n    USING (auth.uid() = user_id);
\n\n  CREATE POLICY "Users can mark notifications as read"\n    ON notifications FOR UPDATE\n    TO authenticated\n    USING (auth.uid() = user_id)\n    WITH CHECK (\n      auth.uid() = user_id AND\n      read_at IS NOT NULL AND\n      EXISTS (\n        SELECT 1\n        FROM notifications n\n        WHERE n.id = notifications.id\n        AND n.read_at IS NULL\n      )\n    );
\nEND $$;
;
