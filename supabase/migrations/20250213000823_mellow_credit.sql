-- Create function for booking status notifications\nCREATE OR REPLACE FUNCTION notify_passenger_on_booking_status()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF NEW.status = 'accepted' THEN\n    INSERT INTO notifications (user_id, type, content)\n    VALUES (\n      NEW.user_id,\n      'booking_accepted',\n      jsonb_build_object(\n        'booking_id', NEW.id,\n        'trip_id', NEW.trip_id\n      )\n    );
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for booking status notifications\nDROP TRIGGER IF EXISTS on_booking_status_changed ON bookings;
\nCREATE TRIGGER on_booking_status_changed\n  AFTER UPDATE OF status ON bookings\n  FOR EACH ROW\n  EXECUTE FUNCTION notify_passenger_on_booking_status();
\n\n-- Create function to mark notifications as read\nCREATE OR REPLACE FUNCTION mark_notification_as_read(notification_id bigint)\nRETURNS void AS $$\nBEGIN\n  UPDATE notifications\n  SET read_at = NOW()\n  WHERE id = notification_id\n  AND user_id = auth.uid()\n  AND read_at IS NULL;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create function to mark messages as read\nCREATE OR REPLACE FUNCTION mark_message_as_read(message_id bigint)\nRETURNS void AS $$\nBEGIN\n  UPDATE messages\n  SET read_at = NOW()\n  WHERE id = message_id\n  AND receiver_id = auth.uid()\n  AND read_at IS NULL;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Drop existing policies if they exist\nDO $$ \nBEGIN\n  -- Drop notification policies if they exist\n  DROP POLICY IF EXISTS "Users can mark own notifications as read" ON notifications;
\n  DROP POLICY IF EXISTS "Users can mark received messages as read" ON messages;
\nEND $$;
\n\n-- Add policies for marking items as read\nCREATE POLICY "Users can mark own notifications as read"\n  ON notifications FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = user_id)\n  WITH CHECK (\n    auth.uid() = user_id AND\n    read_at IS NOT NULL\n  );
\n\nCREATE POLICY "Users can mark received messages as read"\n  ON messages FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = receiver_id)\n  WITH CHECK (\n    auth.uid() = receiver_id AND\n    read_at IS NOT NULL\n  );
;
