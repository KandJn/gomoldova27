\n\n-- Drop all existing booking policies to avoid conflicts\nDO $$ \nBEGIN\n  DROP POLICY IF EXISTS "Users can create bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Users can view bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Users can view their bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Users can view their own bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Drivers can update booking status" ON bookings;
\n  DROP POLICY IF EXISTS "Drivers can update bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Drivers can manage bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Trip drivers can update bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Allow users to create bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Allow users to view relevant bookings" ON bookings;
\n  DROP POLICY IF EXISTS "Allow drivers to update booking status" ON bookings;
\nEND $$;
\n\n-- Create helper function for checking available seats\nCREATE OR REPLACE FUNCTION get_trip_available_seats(trip_id bigint)\nRETURNS integer AS $$\n  SELECT \n    t.seats - COALESCE(COUNT(b.id), 0)\n  FROM trips t\n  LEFT JOIN bookings b ON b.trip_id = t.id AND b.status = 'accepted'\n  WHERE t.id = $1\n  GROUP BY t.seats;
\n$$ LANGUAGE sql STABLE;
\n\n-- Create new simplified booking policies\nCREATE POLICY "booking_create_policy"\n  ON bookings FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    -- User must be authenticated and not the driver\n    auth.uid() = user_id AND\n    NOT EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id AND t.driver_id = auth.uid()\n    ) AND\n    -- Must have available seats\n    get_trip_available_seats(trip_id) > 0\n  );
\n\nCREATE POLICY "booking_select_policy"\n  ON bookings FOR SELECT\n  TO authenticated\n  USING (\n    -- Users can see their own bookings\n    auth.uid() = user_id OR\n    -- Drivers can see bookings for their trips\n    EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id AND t.driver_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "booking_update_policy"\n  ON bookings FOR UPDATE\n  TO authenticated\n  USING (\n    -- Only drivers can update bookings for their trips\n    EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id AND t.driver_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    -- Only allow valid status values\n    status IN ('accepted', 'rejected', 'cancelled')\n  );
\n\n-- Add trigger to prevent overbooking\nCREATE OR REPLACE FUNCTION prevent_trip_overbooking()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.status = 'accepted' AND get_trip_available_seats(NEW.trip_id) <= 0 THEN\n    RAISE EXCEPTION 'No available seats for this trip';
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\nDROP TRIGGER IF EXISTS check_seats_before_accept ON bookings;
\nCREATE TRIGGER check_seats_before_accept\n  BEFORE UPDATE OF status ON bookings\n  FOR EACH ROW\n  WHEN (NEW.status = 'accepted')\n  EXECUTE FUNCTION prevent_trip_overbooking();
\n\n-- Add indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_bookings_trip_status ON bookings(trip_id, status);
\nCREATE INDEX IF NOT EXISTS idx_bookings_user_status ON bookings(user_id, status);
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW trip_seats;
;
