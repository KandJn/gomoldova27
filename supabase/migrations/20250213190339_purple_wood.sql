\n\n-- Drop all existing booking policies\nDO $$ \nBEGIN\n  DROP POLICY IF EXISTS "bookings_insert_policy" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_select_policy" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_update_policy" ON bookings;
\nEND $$;
\n\n-- Create helper function for counting accepted bookings\nCREATE OR REPLACE FUNCTION get_accepted_bookings_count(trip_id bigint)\nRETURNS bigint AS $$\n  SELECT COUNT(*)::bigint\n  FROM bookings\n  WHERE bookings.trip_id = $1 \n  AND bookings.status = 'accepted';
\n$$ LANGUAGE sql STABLE;
\n\n-- Create new simplified booking policies\nCREATE POLICY "bookings_insert_policy"\n  ON bookings FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    -- User must be authenticated and not the driver\n    auth.uid() = user_id AND\n    EXISTS (\n      SELECT 1 \n      FROM trips t\n      WHERE t.id = trip_id\n      AND t.driver_id != auth.uid()\n      AND t.seats > get_accepted_bookings_count(t.id)\n    )\n  );
\n\nCREATE POLICY "bookings_select_policy"\n  ON bookings FOR SELECT\n  TO authenticated\n  USING (\n    -- Users can see their own bookings\n    auth.uid() = user_id OR\n    -- Drivers can see bookings for their trips\n    EXISTS (\n      SELECT 1 \n      FROM trips t\n      WHERE t.id = trip_id \n      AND t.driver_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "bookings_update_policy"\n  ON bookings FOR UPDATE\n  TO authenticated\n  USING (\n    -- Only drivers can update bookings for their trips\n    EXISTS (\n      SELECT 1 \n      FROM trips t\n      WHERE t.id = trip_id \n      AND t.driver_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    -- Only allow valid status values\n    status IN ('accepted', 'rejected', 'cancelled')\n  );
\n\n-- Add trigger to prevent overbooking\nCREATE OR REPLACE FUNCTION check_booking_seats()\nRETURNS trigger AS $$\nDECLARE\n  available_seats integer;
\nBEGIN\n  SELECT t.seats - get_accepted_bookings_count(NEW.trip_id)\n  INTO available_seats\n  FROM trips t\n  WHERE t.id = NEW.trip_id;
\n\n  IF NEW.status = 'accepted' AND available_seats <= 0 THEN\n    RAISE EXCEPTION 'No available seats for this trip';
\n  END IF;
\n  \n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\nDROP TRIGGER IF EXISTS booking_seats_check ON bookings;
\nCREATE TRIGGER booking_seats_check\n  BEFORE UPDATE OF status ON bookings\n  FOR EACH ROW\n  WHEN (NEW.status = 'accepted')\n  EXECUTE FUNCTION check_booking_seats();
\n\n-- Add indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_bookings_trip_status ON bookings(trip_id, status);
\nCREATE INDEX IF NOT EXISTS idx_bookings_user_status ON bookings(user_id, status);
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW trip_seats;
;
