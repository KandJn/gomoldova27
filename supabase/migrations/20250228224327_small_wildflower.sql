-- Drop existing problematic policies\nDROP POLICY IF EXISTS "bookings_create" ON bookings;
\nDROP POLICY IF EXISTS "bookings_view" ON bookings;
\nDROP POLICY IF EXISTS "bookings_update" ON bookings;
\nDROP POLICY IF EXISTS "bookings_insert_policy" ON bookings;
\nDROP POLICY IF EXISTS "bookings_select_policy" ON bookings;
\nDROP POLICY IF EXISTS "bookings_update_policy" ON bookings;
\nDROP POLICY IF EXISTS "allow_booking_insert" ON bookings;
\nDROP POLICY IF EXISTS "allow_booking_select" ON bookings;
\nDROP POLICY IF EXISTS "allow_booking_update" ON bookings;
\nDROP POLICY IF EXISTS "allow_all_booking_insert" ON bookings;
\nDROP POLICY IF EXISTS "allow_all_booking_select" ON bookings;
\nDROP POLICY IF EXISTS "allow_driver_booking_update" ON bookings;
\n\n-- Create simple function to check available seats\nCREATE OR REPLACE FUNCTION check_available_seats(trip_id bigint)\nRETURNS boolean AS $$\nBEGIN\n  RETURN EXISTS (\n    SELECT 1 FROM trips t\n    WHERE t.id = trip_id\n    AND t.seats > (\n      SELECT COUNT(*)\n      FROM bookings b\n      WHERE b.trip_id = t.id\n      AND b.status = 'accepted'\n    )\n  );
\nEND;
\n$$ LANGUAGE plpgsql STABLE;
\n\n-- Create new simplified booking policies\n-- Any authenticated user can create a booking if there are available seats\nCREATE POLICY "open_booking_insert"\n  ON bookings FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    check_available_seats(trip_id)\n  );
\n\n-- Any authenticated user can view bookings\nCREATE POLICY "open_booking_select"\n  ON bookings FOR SELECT\n  TO authenticated\n  USING (true);
\n\n-- Only trip drivers can update booking status\nCREATE POLICY "driver_booking_update"\n  ON bookings FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id\n      AND t.driver_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    status IN ('accepted', 'rejected', 'cancelled')\n  );
\n\n-- Add trigger to prevent overbooking\nCREATE OR REPLACE FUNCTION prevent_overbooking()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.status = 'accepted' AND NOT check_available_seats(NEW.trip_id) THEN\n    RAISE EXCEPTION 'No available seats for this trip';
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql;
\n\n-- Create trigger\nDROP TRIGGER IF EXISTS check_seats_before_accept ON bookings;
\nCREATE TRIGGER check_seats_before_accept\n  BEFORE UPDATE OF status ON bookings\n  FOR EACH ROW\n  WHEN (NEW.status = 'accepted')\n  EXECUTE FUNCTION prevent_overbooking();
\n\n-- Add indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_bookings_trip_status ON bookings(trip_id, status);
\nCREATE INDEX IF NOT EXISTS idx_bookings_user_status ON bookings(user_id, status);
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW trip_seats;
;
