-- Drop all existing booking policies\nDO $$ \nBEGIN\n  DROP POLICY IF EXISTS "bookings_create" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_view" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_update" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_insert_policy" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_select_policy" ON bookings;
\n  DROP POLICY IF EXISTS "bookings_update_policy" ON bookings;
\n  DROP POLICY IF EXISTS "allow_booking_insert" ON bookings;
\n  DROP POLICY IF EXISTS "allow_booking_select" ON bookings;
\n  DROP POLICY IF EXISTS "allow_booking_update" ON bookings;
\n  DROP POLICY IF EXISTS "allow_all_booking_insert" ON bookings;
\n  DROP POLICY IF EXISTS "allow_all_booking_select" ON bookings;
\n  DROP POLICY IF EXISTS "allow_driver_booking_update" ON bookings;
\n  DROP POLICY IF EXISTS "open_booking_insert" ON bookings;
\n  DROP POLICY IF EXISTS "open_booking_select" ON bookings;
\n  DROP POLICY IF EXISTS "driver_booking_update" ON bookings;
\nEND $$;
\n\n-- Create simple booking policies\nCREATE POLICY "anyone_can_book"\n  ON bookings FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    -- User must be authenticated\n    auth.uid() = user_id AND\n    -- User cannot book their own trip\n    NOT EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id\n      AND t.driver_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "view_own_bookings"\n  ON bookings FOR SELECT\n  TO authenticated\n  USING (\n    -- Users can see their own bookings\n    auth.uid() = user_id OR\n    -- Drivers can see bookings for their trips\n    EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id\n      AND t.driver_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "drivers_manage_bookings"\n  ON bookings FOR UPDATE\n  TO authenticated\n  USING (\n    -- Only drivers can update bookings for their trips\n    EXISTS (\n      SELECT 1 FROM trips t\n      WHERE t.id = trip_id\n      AND t.driver_id = auth.uid()\n    )\n  )\n  WITH CHECK (\n    -- Only allow valid status values\n    status IN ('accepted', 'rejected', 'cancelled')\n  );
\n\n-- Add notification trigger for booking status changes\nCREATE OR REPLACE FUNCTION notify_on_booking_status()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.status != OLD.status THEN\n    INSERT INTO notifications (\n      user_id,\n      type,\n      content\n    )\n    VALUES (\n      NEW.user_id,\n      CASE \n        WHEN NEW.status = 'accepted' THEN 'booking_accepted'\n        WHEN NEW.status = 'rejected' THEN 'booking_rejected'\n        ELSE 'booking_' || NEW.status\n      END,\n      jsonb_build_object(\n        'booking_id', NEW.id,\n        'trip_id', NEW.trip_id,\n        'driver_id', (SELECT driver_id FROM trips WHERE id = NEW.trip_id)\n      )\n    );
\n  END IF;
\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create trigger for notifications\nDROP TRIGGER IF EXISTS on_booking_status_changed ON bookings;
\nCREATE TRIGGER on_booking_status_changed\n  AFTER UPDATE OF status ON bookings\n  FOR EACH ROW\n  EXECUTE FUNCTION notify_on_booking_status();
\n\n-- Add indexes for better performance\nCREATE INDEX IF NOT EXISTS idx_bookings_trip_status ON bookings(trip_id, status);
\nCREATE INDEX IF NOT EXISTS idx_bookings_user_status ON bookings(user_id, status);
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW trip_seats;
;
