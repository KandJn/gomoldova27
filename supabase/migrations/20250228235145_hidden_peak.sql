\n\n-- Create bus_companies table\nCREATE TABLE IF NOT EXISTS bus_companies (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  owner_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  name text NOT NULL,\n  registration_number text NOT NULL,\n  email text NOT NULL,\n  phone text NOT NULL,\n  website text,\n  operating_license text NOT NULL,\n  insurance_number text NOT NULL,\n  fleet_size integer NOT NULL,\n  fleet_details text NOT NULL,\n  logo_url text,\n  verification_status text NOT NULL DEFAULT 'pending' CHECK (verification_status IN ('pending', 'verified', 'rejected')),\n  created_at timestamptz DEFAULT now(),\n  UNIQUE(registration_number)\n);
\n\n-- Create bus_routes table\nCREATE TABLE IF NOT EXISTS bus_routes (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  company_id uuid REFERENCES bus_companies(id) ON DELETE CASCADE NOT NULL,\n  from_city text NOT NULL,\n  to_city text NOT NULL,\n  departure_date date NOT NULL,\n  departure_time time NOT NULL,\n  arrival_date date NOT NULL,\n  arrival_time time NOT NULL,\n  price integer NOT NULL CHECK (price >= 0),\n  seats integer NOT NULL CHECK (seats > 0),\n  bus_type text NOT NULL,\n  amenities jsonb NOT NULL DEFAULT '{}'::jsonb,\n  pickup_point text NOT NULL,\n  dropoff_point text NOT NULL,\n  booking_conditions text NOT NULL,\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Create bus_bookings table\nCREATE TABLE IF NOT EXISTS bus_bookings (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  route_id uuid REFERENCES bus_routes(id) ON DELETE CASCADE NOT NULL,\n  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled')),\n  seats integer NOT NULL CHECK (seats > 0),\n  created_at timestamptz DEFAULT now()\n);
\n\n-- Enable RLS\nALTER TABLE bus_companies ENABLE ROW LEVEL SECURITY;
\nALTER TABLE bus_routes ENABLE ROW LEVEL SECURITY;
\nALTER TABLE bus_bookings ENABLE ROW LEVEL SECURITY;
\n\n-- Create storage bucket for company logos\nINSERT INTO storage.buckets (id, name, public)\nVALUES ('company-logos', 'company-logos', true)\nON CONFLICT (id) DO NOTHING;
\n\n-- Create indexes\nCREATE INDEX idx_bus_companies_owner ON bus_companies(owner_id);
\nCREATE INDEX idx_bus_companies_status ON bus_companies(verification_status);
\nCREATE INDEX idx_bus_routes_company ON bus_routes(company_id);
\nCREATE INDEX idx_bus_routes_dates ON bus_routes(departure_date, arrival_date);
\nCREATE INDEX idx_bus_bookings_route ON bus_bookings(route_id);
\nCREATE INDEX idx_bus_bookings_user ON bus_bookings(user_id);
\n\n-- Create policies for bus_companies\nCREATE POLICY "Companies are viewable by everyone"\n  ON bus_companies FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "Users can create their own company"\n  ON bus_companies FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = owner_id);
\n\nCREATE POLICY "Company owners can update their company"\n  ON bus_companies FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = owner_id)\n  WITH CHECK (auth.uid() = owner_id);
\n\n-- Create policies for bus_routes\nCREATE POLICY "Routes are viewable by everyone"\n  ON bus_routes FOR SELECT\n  TO public\n  USING (true);
\n\nCREATE POLICY "Verified companies can create routes"\n  ON bus_routes FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM bus_companies\n      WHERE id = company_id\n      AND owner_id = auth.uid()\n      AND verification_status = 'verified'\n    )\n  );
\n\nCREATE POLICY "Company owners can update their routes"\n  ON bus_routes FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM bus_companies\n      WHERE id = bus_routes.company_id\n      AND owner_id = auth.uid()\n    )\n  );
\n\n-- Create policies for bus_bookings\nCREATE POLICY "Users can view their bookings"\n  ON bus_bookings FOR SELECT\n  TO authenticated\n  USING (\n    auth.uid() = user_id OR\n    EXISTS (\n      SELECT 1 FROM bus_routes r\n      JOIN bus_companies c ON c.id = r.company_id\n      WHERE r.id = route_id\n      AND c.owner_id = auth.uid()\n    )\n  );
\n\nCREATE POLICY "Users can create bookings"\n  ON bus_bookings FOR INSERT\n  TO authenticated\n  WITH CHECK (auth.uid() = user_id);
\n\nCREATE POLICY "Company owners can update booking status"\n  ON bus_bookings FOR UPDATE\n  TO authenticated\n  USING (\n    EXISTS (\n      SELECT 1 FROM bus_routes r\n      JOIN bus_companies c ON c.id = r.company_id\n      WHERE r.id = route_id\n      AND c.owner_id = auth.uid()\n    )\n  );
\n\n-- Create storage policies\nCREATE POLICY "Anyone can view company logos"\n  ON storage.objects FOR SELECT\n  USING (bucket_id = 'company-logos');
\n\nCREATE POLICY "Company owners can upload logos"\n  ON storage.objects FOR INSERT\n  TO authenticated\n  WITH CHECK (\n    bucket_id = 'company-logos' AND\n    EXISTS (\n      SELECT 1 FROM bus_companies\n      WHERE owner_id = auth.uid()\n    )\n  );
;
