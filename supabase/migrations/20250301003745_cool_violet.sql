-- Drop existing policies if they exist\nDO $$ \nBEGIN\n  DROP POLICY IF EXISTS "verification_request_policy" ON profiles;
\n  DROP POLICY IF EXISTS "admin_verification_policy" ON profiles;
\n  DROP POLICY IF EXISTS "user_verification_request_policy" ON profiles;
\n  DROP POLICY IF EXISTS "admin_user_verification_policy" ON profiles;
\n  DROP POLICY IF EXISTS "user_can_request_verification" ON profiles;
\n  DROP POLICY IF EXISTS "admin_can_manage_verification" ON profiles;
\n  DROP POLICY IF EXISTS "allow_users_to_request_verification" ON profiles;
\n  DROP POLICY IF EXISTS "allow_admin_to_manage_verification" ON profiles;
\nEND $$;
\n\n-- Add verification_status column if it doesn't exist\nDO $$ \nBEGIN\n  -- Add column if it doesn't exist\n  IF NOT EXISTS (\n    SELECT 1 FROM information_schema.columns \n    WHERE table_name = 'profiles' AND column_name = 'verification_status'\n  ) THEN\n    ALTER TABLE profiles ADD COLUMN verification_status text DEFAULT 'unverified';
\n  END IF;
\n\n  -- Drop constraint if it exists\n  IF EXISTS (\n    SELECT 1 FROM information_schema.constraint_column_usage \n    WHERE constraint_name = 'check_verification_status'\n  ) THEN\n    ALTER TABLE profiles DROP CONSTRAINT check_verification_status;
\n  END IF;
\n\n  -- Add constraint\n  ALTER TABLE profiles \n    ADD CONSTRAINT check_verification_status \n    CHECK (verification_status IN ('unverified', 'pending', 'verified', 'rejected'));
\nEND $$;
\n\n-- Create index for verification status if it doesn't exist\nCREATE INDEX IF NOT EXISTS idx_profiles_verification_status \n  ON profiles(verification_status);
\n\n-- Update existing profiles to have unverified status\nUPDATE profiles\nSET verification_status = 'unverified'\nWHERE verification_status IS NULL;
\n\n-- Create function to handle verification requests\nCREATE OR REPLACE FUNCTION request_verification()\nRETURNS void AS $$\nBEGIN\n  UPDATE profiles\n  SET verification_status = 'pending'\n  WHERE id = auth.uid()\n  AND verification_status = 'unverified';
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create new policies with unique names\nCREATE POLICY "profile_verification_request"\n  ON profiles FOR UPDATE\n  TO authenticated\n  USING (auth.uid() = id)\n  WITH CHECK (\n    auth.uid() = id AND\n    verification_status = 'pending'\n  );
\n\nCREATE POLICY "profile_admin_verification"\n  ON profiles FOR UPDATE\n  TO authenticated\n  USING (auth.email() = 'asassin.damian@gmail.com')\n  WITH CHECK (auth.email() = 'asassin.damian@gmail.com');
;
