-- Create notifications table if it doesn't exist\nCREATE TABLE IF NOT EXISTS notifications (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  type text NOT NULL,\n  content jsonb NOT NULL,\n  created_at timestamptz DEFAULT now(),\n  read_at timestamptz,\n  CONSTRAINT valid_notification_type CHECK (\n    type IN ('booking_request', 'booking_accepted', 'booking_rejected', 'booking_cancelled')\n  )\n);
\n\n-- Enable RLS\nALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
\n\n-- Create indexes\nCREATE INDEX IF NOT EXISTS idx_notifications_user ON notifications(user_id);
\nCREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type);
\nCREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at);
\n\n-- Drop existing policy if it exists\nDROP POLICY IF EXISTS "Users can view own notifications" ON notifications;
\n\n-- Create RLS policy with a unique name\nCREATE POLICY "notifications_visibility_20250301"\n  ON notifications FOR SELECT\n  TO authenticated\n  USING (auth.uid() = user_id);
\n\n-- Create function to create booking notification\nCREATE OR REPLACE FUNCTION create_booking_notification()\nRETURNS trigger AS $$\nBEGIN\n  -- Create notification for trip owner\n  INSERT INTO notifications (\n    user_id,\n    type,\n    content\n  )\n  SELECT \n    t.driver_id,\n    'booking_request',\n    jsonb_build_object(\n      'booking_id', NEW.id,\n      'trip_id', NEW.trip_id,\n      'passenger_id', NEW.user_id,\n      'passenger_name', (SELECT full_name FROM profiles WHERE id = NEW.user_id),\n      'trip_details', jsonb_build_object(\n        'from_city', t.from_city,\n        'to_city', t.to_city,\n        'date', t.date,\n        'time', t.time\n      )\n    )\n  FROM trips t\n  WHERE t.id = NEW.trip_id;
\n\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create function to create booking status notification\nCREATE OR REPLACE FUNCTION create_booking_status_notification()\nRETURNS trigger AS $$\nBEGIN\n  IF NEW.status != OLD.status THEN\n    -- Create notification for passenger\n    INSERT INTO notifications (\n      user_id,\n      type,\n      content\n    )\n    SELECT \n      NEW.user_id,\n      'booking_' || NEW.status,\n      jsonb_build_object(\n        'booking_id', NEW.id,\n        'trip_id', NEW.trip_id,\n        'driver_id', t.driver_id,\n        'driver_name', (SELECT full_name FROM profiles WHERE id = t.driver_id),\n        'trip_details', jsonb_build_object(\n          'from_city', t.from_city,\n          'to_city', t.to_city,\n          'date', t.date,\n          'time', t.time\n        )\n      )\n    FROM trips t\n    WHERE t.id = NEW.trip_id;
\n  END IF;
\n\n  RETURN NEW;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Create triggers\nDROP TRIGGER IF EXISTS on_booking_created ON bookings;
\nCREATE TRIGGER on_booking_created\n  AFTER INSERT ON bookings\n  FOR EACH ROW\n  EXECUTE FUNCTION create_booking_notification();
\n\nDROP TRIGGER IF EXISTS on_booking_status_changed ON bookings;
\nCREATE TRIGGER on_booking_status_changed\n  AFTER UPDATE OF status ON bookings\n  FOR EACH ROW\n  EXECUTE FUNCTION create_booking_status_notification();
\n\n-- Create function to mark notification as read\nCREATE OR REPLACE FUNCTION mark_notification_as_read(notification_id uuid)\nRETURNS void AS $$\nBEGIN\n  UPDATE notifications\n  SET read_at = now()\n  WHERE id = notification_id\n  AND user_id = auth.uid()\n  AND read_at IS NULL;
\nEND;
\n$$ LANGUAGE plpgsql SECURITY DEFINER;
\n\n-- Refresh materialized view\nREFRESH MATERIALIZED VIEW available_seats;
;
